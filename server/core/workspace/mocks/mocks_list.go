// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/konflux-workspaces/workspaces/server/core/workspace (interfaces: WorkspaceLister)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mocks_list.go -package=mocks . WorkspaceLister
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/konflux-workspaces/workspaces/server/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockWorkspaceLister is a mock of WorkspaceLister interface.
type MockWorkspaceLister struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceListerMockRecorder
}

// MockWorkspaceListerMockRecorder is the mock recorder for MockWorkspaceLister.
type MockWorkspaceListerMockRecorder struct {
	mock *MockWorkspaceLister
}

// NewMockWorkspaceLister creates a new mock instance.
func NewMockWorkspaceLister(ctrl *gomock.Controller) *MockWorkspaceLister {
	mock := &MockWorkspaceLister{ctrl: ctrl}
	mock.recorder = &MockWorkspaceListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceLister) EXPECT() *MockWorkspaceListerMockRecorder {
	return m.recorder
}

// ListUserWorkspaces mocks base method.
func (m *MockWorkspaceLister) ListUserWorkspaces(arg0 context.Context, arg1 string, arg2 *v1alpha1.WorkspaceList, arg3 ...client.ListOption) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserWorkspaces", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUserWorkspaces indicates an expected call of ListUserWorkspaces.
func (mr *MockWorkspaceListerMockRecorder) ListUserWorkspaces(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserWorkspaces", reflect.TypeOf((*MockWorkspaceLister)(nil).ListUserWorkspaces), varargs...)
}
