// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/konflux-workspaces/workspaces/server/core/workspace (interfaces: WorkspaceReader)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mocks_read.go -package=mocks . WorkspaceReader
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/konflux-workspaces/workspaces/server/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockWorkspaceReader is a mock of WorkspaceReader interface.
type MockWorkspaceReader struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceReaderMockRecorder
}

// MockWorkspaceReaderMockRecorder is the mock recorder for MockWorkspaceReader.
type MockWorkspaceReaderMockRecorder struct {
	mock *MockWorkspaceReader
}

// NewMockWorkspaceReader creates a new mock instance.
func NewMockWorkspaceReader(ctrl *gomock.Controller) *MockWorkspaceReader {
	mock := &MockWorkspaceReader{ctrl: ctrl}
	mock.recorder = &MockWorkspaceReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceReader) EXPECT() *MockWorkspaceReaderMockRecorder {
	return m.recorder
}

// ReadUserWorkspace mocks base method.
func (m *MockWorkspaceReader) ReadUserWorkspace(arg0 context.Context, arg1, arg2, arg3 string, arg4 *v1alpha1.Workspace, arg5 ...client.GetOption) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadUserWorkspace", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadUserWorkspace indicates an expected call of ReadUserWorkspace.
func (mr *MockWorkspaceReaderMockRecorder) ReadUserWorkspace(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserWorkspace", reflect.TypeOf((*MockWorkspaceReader)(nil).ReadUserWorkspace), varargs...)
}
