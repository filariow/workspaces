// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/konflux-workspaces/workspaces/server/core/workspace (interfaces: WorkspaceUpdater)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mocks_update.go -package=mocks . WorkspaceUpdater
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/konflux-workspaces/workspaces/server/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockWorkspaceUpdater is a mock of WorkspaceUpdater interface.
type MockWorkspaceUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceUpdaterMockRecorder
}

// MockWorkspaceUpdaterMockRecorder is the mock recorder for MockWorkspaceUpdater.
type MockWorkspaceUpdaterMockRecorder struct {
	mock *MockWorkspaceUpdater
}

// NewMockWorkspaceUpdater creates a new mock instance.
func NewMockWorkspaceUpdater(ctrl *gomock.Controller) *MockWorkspaceUpdater {
	mock := &MockWorkspaceUpdater{ctrl: ctrl}
	mock.recorder = &MockWorkspaceUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceUpdater) EXPECT() *MockWorkspaceUpdaterMockRecorder {
	return m.recorder
}

// UpdateUserWorkspace mocks base method.
func (m *MockWorkspaceUpdater) UpdateUserWorkspace(arg0 context.Context, arg1 string, arg2 *v1alpha1.Workspace, arg3 ...client.UpdateOption) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserWorkspace", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserWorkspace indicates an expected call of UpdateUserWorkspace.
func (mr *MockWorkspaceUpdaterMockRecorder) UpdateUserWorkspace(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserWorkspace", reflect.TypeOf((*MockWorkspaceUpdater)(nil).UpdateUserWorkspace), varargs...)
}
